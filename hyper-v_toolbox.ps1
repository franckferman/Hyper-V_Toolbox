<#
.SYNOPSIS
Interactive PowerShell script for virtual machine management, inspired by Docker and Vagrant.

.DESCRIPTION
This project is aimed at providing users with a more efficient and user-friendly tool for virtual machine management. Similar to Vagrant, it enables the quick creation and management of machines, but with a key difference: it deploys pre-installed machines that are sysprepped, with disks ready to install. This eliminates the need to send scripts to machines, which can be time-consuming, resulting in a process that is twice as fast as Vagrant.

.EXAMPLE
PS > Set-ExecutionPolicy -Scope Process -ExecutionPolicy Unrestricted; .\hyper-v-toolbox.ps1

.NOTES
Author: Franck Ferman
Version: 4.0.0
Date: 04/05/2023

.LINK
https://github.com/franckferman/Hyper-V_Toolbox
#>

$scriptVersion = 4.0

# Implementation of an update verification system.

<#
$repoUrl = 'https://raw.githubusercontent.com/franckferman/Hyper-V_Toolbox/main/hyper-v_toolbox.ps1'

function Get-WANStatus {
    param (
        [Parameter(Mandatory=$false)]
        [string[]]$urls = @('https://www.google.com/search?q=franck+ferman', 'https://www.google.com/search?q=blog+franck+ferman', 'https://blog.franckferman.fr')
    )

    $selectedUrl = Get-Random -InputObject $urls -Count 1

    $headers = @{
        'User-Agent' = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:88.0) Gecko/20100101 Firefox/88.0'
    }

    $webSession = New-Object Microsoft.PowerShell.Commands.WebRequestSession

    try {
        # Allows not to display the information message generated by Invoke-WebRequest.
        $ProgressPreference = 'SilentlyContinue'
        $response = Invoke-WebRequest -Uri $selectedUrl -WebSession $webSession -Headers $headers -UseBasicParsing -TimeoutSec 5

        if ($response.StatusCode -eq 'OK') {
            return 1
        }
        else {
            return 0
        }
    }
    catch {
        return 0
    }
}

function CheckVersion {
$repoUrl = 'https://raw.githubusercontent.com/franckferman/Hyper-V_Toolbox/main/hyper-v_toolbox.ps1'

    try {
        $content = (Invoke-WebRequest -Uri $repoUrl).Content
        $firstLines = $content.Split("`n") | Select-Object -First 100
        $versionLine = $firstLines | Select-String "Version: "
        $version = $versionLine.Line.Split(":")[1].Trim()

        Write-Host "La version actuelle de Hyper-V Toolbox est $version"
    }
    catch {
        Write-Warning "Impossible de récupérer la version de Hyper-V Toolbox à partir de l'URL $repoUrl : $_"
    }
}
#>

# The variables below represent the URLs of the JSON files containing links to the resources (images). TO-DO: Improve variable names.
# These values are at the top of the script because they are the most important values for the actual configuration, from where it will get its resources.

# Awaiting resolution of the upload problem with Google Drive (debugging).
# [string]$script:BlankWindowsJsonLinksFile = 'https://drive.google.com/file/d/1dBFadZXRnhb2fPIU9LJxdcdlBQky9eR5/view?usp=share_link'

# JSON file containing the link to the official Windows ISO.
[string]$script:BlankWindowsJsonLinksFile = 'https://raw.githubusercontent.com/franckferman/Hyper-V_Toolbox/main/assets/links/blank_windows.json'

# Declaration of banners (ASCII art) and random selection function (Select-RandomBanner).

function Show-Buddha_Banner
{
@"
                                  _
                               _ooOoo_
                              o8888888o
                              88" . "88
                              (| -_- |)
                              O\  =  /O
                           ____/'---'\____
                         .'  \\|     |//  '.
                        /  \\|||  :  |||//  \
                       /  _||||| -:- |||||_  \
                       |   | \\\  -  /'| |   |
                       | \_|  '\'---'//  |_/ |
                       \  .-\__ '-. -'__/-.  /
                     ___'. .'  /--.--\  '. .'___
                  ."" '<  '.___\_<|>_/___.' _> \"".
                 | | :  '- \'. ;'. _/; .'/ /  .' ; |
                 \  \ '-.   \_\_'. _.'_/_/  -' _.' /
       ==========='-.'___'-.__\ \___  /__.-'_.'_.-'================
                               '=--=-'
                                          _____            _ _               
  /\  /\_   _ _ __   ___ _ __    /\   /\ /__   \___   ___ | | |__   _____  __
 / /_/ / | | | '_ \ / _ \ '__|___\ \ / /   / /\/ _ \ / _ \| | '_ \ / _ \ \/ /
/ __  /| |_| | |_) |  __/ | |_____\ V /   / / | (_) | (_) | | |_) | (_) >  < 
\/ /_/  \__, | .__/ \___|_|        \_/    \/   \___/ \___/|_|_.__/ \___/_/\_\
        |___/|_|                                                             
"@
}

function Show-Window_Banner
{
@"
 _______________________________________________________________________
|[>] Hyper-V Toolbox                                         [-]|[]|[x]"|
|"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""|"|
|PS C:\WINDOWS\system32> Set-Location -Path C:\Users\$env:UserName          | |
|PS C:\Users\$env:UserName> ./hyper-v-toolbox.ps1                           | |
|                                                                     |_|
|_____________________________________________________________________|/|
"@
}

function Show-Window_Banner-Two
{
@"
  .---------.
  |.-------.|
  ||PS C:\>||
  ||       ||
  |"-------'|
.-^---------^-.
| ---~[HPV    |
| Toolbox]---~|
"-------------'
"@
}

function Show-Window_Banner-Three
{
@"
                     ,---.           ,---.
                    / /"'.\.--"""--./,'"\ \
                    \ \    _       _    / /
                     './  / __   __ \  \,'
                      /    /_O)_(_O\    \
                      |  .-'  ___  '-.  |
                   .--|       \_/       |--.
                 ,'    \   \   |   /   /    '.
                /       '.  '--^--'  ,'       \
             .-"""""-.    '--.___.--'     .-"""""-.
.-----------/         \------------------/         \--------------.
| .---------\         /----------------- \         /------------. |
| |          '-'--'--'                    '--'--'-'             | |
| |                                                             | |
| |           __7__          %%%,%%%%%%%                        | |
| |           \_._/           ,'%% \\-*%%%%%%%                  | |
| |           ( ^ )     ;%%%%%*%   _%%%%                        | |
| |            '='|\.    ,%%%       \(_.*%%%%.                  | |
| |              /  |    % *%%, ,%%%%*(    '                    | |
| |            (/   |  %^     ,*%%% )\|,%%*%,_                  | |
| |            |__, |       *%    \/ #).-*%%*                   | |
| |             |   |           _.) ,/ *%,                      | |
| |             |   |   _________/)#(_____________              | |
| |             /___|  |__________________________|             | |
| |             ===         [Hyper-V Toolbox]                   | |
| |_____________________________________________________________| |
|_________________________________________________________________|
                   )__________|__|__________(
                  |            ||            |
                  |____________||____________|
                    ),-----.(      ),-----.(
                  ,'   ==.   \    /  .==    '.
                 /            )  (            \
                 '==========='    '===========' 
"@
}

function Show-Window_Banner-Four
{
@"
                        .="=.
                      _/.-.-.\_     _
                     ( ( o o ) )    ))
      .-------.       |/  "  \|    //
      |  HPV  |        \'---'/    //
     _|  TBX  |_       /'"""'\\  ((
   =(_|_______|_)=    / /_,_\ \\  \\
     |:::::::::|      \_\\_'__/ \  ))
     |:::::::[]|       /'  /'~\  |//
     |o=======.|      /   /    \  /
     '"""""""""'  ,--',--'\/\    /
                   '-- "--'  '--'
"@
}

function Show_Windows_Logo
{
@"
       _.-;;-._
'-..-'|   ||   |
'-..-'|_.-;;-._|
'-..-'|   ||   |
'-..-'|_.-''-._|
"@
}

function Show-Window_Banner-Two
{
@"
 .----------------.
|          _       |
|      _.-'|'-._   |
| .__.|    |    |  |
|     |_.-'|'-._|  |
| '--'|    |    |  |
| '--'|_.-'-'-._|  |
| '--'             |
 '----------------'
"@
}

function Show-Window_Banner-Three
{
@"
   ._________________.
   |.---------------.|
   ||   -._ .-.     ||
   ||   -._| | |    ||
   ||   -._|"|"|    ||
   ||   -._|.-.|    ||
   ||_______________||
   /.-.-.-.-.-.-.-.-.\
  /.-.-.-.-.-.-.-.-.-.\
 /.-.-.-.-.-.-.-.-.-.-.\
/______/__________\___o_\
\_______________________/
"@
}

function Show-Space_Banner
{
@"

         *                 *                  *              *
                                                      *             *
                        *            *                             ___
  *               *                                          |     | |
        *              _________##                 *        / \    | |
                      @\\\\\\\\\##    *     |              |--o|===|-|
  *                  @@@\\\\\\\\##\       \|/|/            |---|   | |
                    @@ @@\\\\\\\\\\\    \|\\|//|/     *   /     \  | |
             *     @@@@@@@\\\\\\\\\\\    \|\|/|/         | H-T   | | |
                  @@@@@@@@@----------|    \\|//          | P-B   |=| |
       __         @@ @@@ @@__________|     \|/           | V-X   | | |
  ____|_@|_       @@@@@@@@@__________|     \|/           |_______| |_|
=|__ _____ |=     @@@@ .@@@__________|      |             |@| |@|  | |
____0_____0__\|/__@@@@__@@@__________|_\|/__|___\|/__\|/___________|_|_
"@
}

function Show-Space_Banner-Two
{
@"
                                             _.--"""""--._
                                          ,-'             '-.
               _                        ,' --- -  ----   --- '.
             ,'|'.                    ,'       ________________'.
            O'.+,'O                  /        /____(_______)___\ \
   _......_   ,=.         __________;   _____  ____ _____  _____  :
 ,'   ,--.-',,;,:,;;;;;;;///////////|   -----  ---- -----  -----  |
(    (  ==)=========================|      ,---.    ,---.    ,.   |
 '._  '--'-,''''''"""""""\\\\\\\\\\\:     /'. ,'\  /_    \  /\/\  ;
    ''''''                           \    :  Y  :  :-'-. :  : ): /
                                      '.  \  |  /  \=====/  \/\/'
                                        '. '-'-'    '---'    ;'
                                          '-._           _,-'
                                              '--.....--'   ,--.
                                                           ().0()
                                                            ''-'
"@
}

function Show-Space_Banner-Three
{
@"
.                               .       .       .       .       .       .
   .        .        .        .        .        .        .        .        .
     .         .         .        _......____._        .         .
   .          .          . ..--'"" .           """"""---...          .
                   _...--""        ................       '-.              .
                .-'        ...:'::::;:::%:.::::::_;;:...     '-.
             .-'       ..::::'''''   _...---'"""":::+;_::.      '.      .
  .        .' .    ..::::'      _.-""               :::)::.       '.
         .      ..;:::'     _.-'         .             f::'::    o  _
        /     .:::%'  .  .-"                        .-.  ::;;:.   /" "x
  .   .'  ""::.::'    .-"     _.--'"""-.           (   )  ::.::  |_.-' |
     .'    ::;:'    .'     .-" .d@@b.   \    .    . '-'   ::%::   \_ _/    .
    .'    :,::'    /   . _'    8@@@@8   j      .-'       :::::      " o
    | .  :.%:' .  j     (_)    '@@@P'  .'   .-"         ::.::    .  f
    |    ::::     (        -..____...-'  .-"          .::::'       /
.   |    ':'::    '.                ..--'        .  .::'::   .    /
    j     ':::::    '-._____...---""             .::%:::'       .'  .
     \      ::.:%..             .       .    ...:,::::'       .'
 .    \       ':::':..                ....::::.::::'       .-'          .
       \    .   '':::%::'::.......:::::%::.::::''       .-'
      . '.        . ''::::::%::::.::;;:::::'''      _.-'          .
  .       '-..     .    .   '''''''''         . _.-'     .          .
         .    ""--...____    .   ______......--' .         .         .
  .        .        .    """"""""     .        .        .        .        .
 .       .       .       .       .       .       .       .       .
"@
}

function Show-HPV_TBX_Banner {
@"
 _     ___   _         _____  ___   _ 
| |_| | |_) \ \  /      | |  | |_) \ \_/
|_| | |_|    \_\/       |_|  |_|_) /_/ \
"@
}

function Show-PacMan-One
{
@"
   ,##.                   ,==.
 ,#    #.                 \ o ',
#        #     _     _     \    \
#        #    (_)   (_)    /    ; 
 '#    #'                 /   .'  
   '##'                   "=="

 _     ___   _         _____  ___   _ 
| |_| | |_) \ \  /      | |  | |_) \ \_/
|_| | |_|    \_\/       |_|  |_|_) /_/ \
"@
}

function Show-PacMan-Two
{
@"
   ,##.             ,==.
 ,#    #.           \ o ',
#        #     _     \    \
#        #    (_)    /    ; 
 '#    #'           /   .'  
   '##'             "=="

 _     ___   _         _____  ___   _ 
| |_| | |_) \ \  /      | |  | |_) \ \_/
|_| | |_|    \_\/       |_|  |_|_) /_/ \
"@
}

function Show-PacMan-Three
{
@"
   ,##.       ,==.
 ,#    #.     \ o ',
#        #     \    \
#        #     /    ; 
 '#    #'     /   .'  
   '##'       "=="

 _     ___   _         _____  ___   _ 
| |_| | |_) \ \  /      | |  | |_) \ \_/
|_| | |_|    \_\/       |_|  |_|_) /_/ \
"@
}

function Show-Animated_Pacman {
    [console]::Clear()
    Write-Host (Show-PacMan-One)
    Start-Sleep -Seconds 1
    [console]::Clear()
    Write-Host (Show-PacMan-Two)
    Start-Sleep -Seconds 1
    [console]::Clear()
    Write-Host (Show-PacMan-Three)
    Start-Sleep -Seconds 1
    [console]::Clear()
}


    
function Select-RandomBanner {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory=$true)]
        [string[]]$BannerFunctions
    )

    $Count = $BannerFunctions.Count
    $randomNumber = Get-Random -Minimum 0 -Maximum $Count
    & $BannerFunctions[$randomNumber]
}

# Selection of hard disk size.

Function Ask-HDDSize {
  param (
    [array[]]$HDDOptions = @('8GB', '16GB', '24GB', '32GB', '48GB', '64GB', '96GB', '128GB'),
    [Parameter(Mandatory=$true)]
    [int]$DefaultHDDSizeChoice
  )

  $SelectedHDDSize = $null

  Write-Host 'Selection of the hard disk size of the virtual machine:'
  Write-Host ''
  for ($index = 0; $index -lt $HDDOptions.Length; $index++) {
    Write-Host "$index - $($HDDOptions[$index])"
  }

  do {
    Write-Host ''
    $selectedIndex = Read-Host "Enter your choice [0-$($HDDOptions.Length - 1)]"
    if ($selectedIndex -ge 0 -and $selectedIndex -lt $HDDOptions.Length) {
      $SelectedHDDSize = $HDDOptions[$selectedIndex]
      break
    } else {
        $SelectedHDDSize = $HDDOptions[$DefaultHDDSizeChoice]
        Write-Host ''
        break
    }
  } while (-not $SelectedHDDSize)

  $script:HDDSize = $SelectedHDDSize
  Write-Warning "Virtual hard disk size: $SelectedHDDSize"
}

# Selection of RAM size.

Function Ask-RAMSize {
  param (
    [array[]]$RAMOptions = @('1GB', '2GB', '4GB', '6GB', '8GB', '12GB'),
    [Parameter(Mandatory=$true)]
    [int]$DefaultRAMSizeChoice
  )

  $SelectedRAMSize = $null

  Write-Host 'Selection of the amount of RAM of the virtual machine:'
  Write-Host ''
  for ($index = 0; $index -lt $RAMOptions.Length; $index++) {
    Write-Host "$index - $($RAMOptions[$index])"
  }

  do {
    Write-Host ''
    $selectedIndex = Read-Host "Enter your choice [0-$($RAMOptions.Length - 1)]"
    if ($selectedIndex -ge 0 -and $selectedIndex -lt $RAMOptions.Length) {
     $SelectedRAMSize = $RAMOptions[$selectedIndex]
      break
    } else {
        $SelectedRAMSize = $RAMOptions[$DefaultRAMSizeChoice]
        break
    }
  } while (-not $SelectedRAMSize)

  $script:RAMSize = $SelectedRAMSize
  Write-Host ''
  Write-Warning "RAM size: $SelectedRAMSize"
}

# Selection of the virtual switch.

Function Ask-VirtualSwitch {
    $shouldContinue = AskYesOrNo -Title 'Question' -Message "Is the integration of a virtual switch desired?" -DefaultNo $true
    Write-Host ''
        if ($shouldContinue) {
            [bool]$script:UseVSwitch = $true
            
            [array]$VSwitches=@()
            Get-VMSwitch | ForEach-Object { $VSwitches += $_.Name }

            Write-Host 'Selection of the virtual switch:'
            Write-Host ''
            For ( $i = 0; $i -lt $VSwitches.Length; $i++ ) { Write-Host "$i - $($VSwitches[$i])" }

            Write-Host ''
            [string]$SelectedVSwitchChoice = Read-Host "Enter your choice [0-$($VSwitches.Length - 1)] or enter C to cancel"
            # To test but since Windows is not case sensitive (if $a = 1, $A = 2, in the end $a =2). I'll probably remove the unnecessary condition if 'C' or 'c'.
            if ($SelectedVSwitchChoice -eq 'C' -or $SelectedVSwitchChoice -eq 'c') {
                [bool]$script:UseVSwitch = $false
                Write-Host ''
                Write-Warning 'Failover action initiated. No virtual switch added.'
            } elseif ($SelectedVSwitchChoice -ge 0 -and $SelectedVSwitchChoice -lt $VSwitches.Length) {
                $VSwitch=$VSwitches[$SelectedVSwitchChoice]
                [string]$script:VSwitchName = $VSwitch
                Write-Host ''
                Write-Warning "Virtual switch added: $VSwitch"
            } else {
                [bool]$script:UseVSwitch = $false
                Write-Host ''
                Write-Warning 'No valid choice selected. No virtual switch added.'
            }

        } else { [bool]$script:UseVSwitch = $false; Write-Warning 'No virtual switch added.' }
}

# Prompt to confirm the name of the virtual machine (Ask-Name). To be defined if really necessary, not very relevant for the moment.

<#
function Confirm-Name {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory=$true)]
        [string]$Title,
        [Parameter(Mandatory=$true)]
        [string]$Message,
        [bool]$DefaultNo = $true,
        [string]$VMName
    )

    $shouldContinue = AskYesOrNo -Title $Title -Message "$Message $VMName" -DefaultNo $DefaultNo
    if ($shouldContinue) {
        $script:VMName = $VMName
    } else {
        Write-Host ""
        Ask-Name
    }
}
#>

# Choosing a name for the virtual machine.

function Ask-Name {
    param (
        [string]$PrefixName = 'VM'
    )

        [string]$VMNameInput = Read-Host 'VM name'
        if (-not $VMNameInput) {
            $randomNumber = Get-Random -Minimum 50 -Maximum 9999
            $ChosenVMName = "$PrefixName-$randomNumber"
            [string]$script:VMName = $ChosenVMName
            Write-Host ''
            Write-Warning "No name specified. $ChosenVMName was generated randomly."
        } else {
            $ChosenVMName = $VMNameInput
            [string]$script:VMName = $ChosenVMName
            Write-Host ''
            Write-Warning "Name of the virtual machine: $ChosenVMName"
        }
}

# CLONE : Definition of parameters and variables for the creation of the virtual machine.

function Ask-Clone-Blank_VM-Windows {
    Clear-Host
    $Banners = @('Show_Windows_Logo', 'Show-Window_Banner-Two', 'Show-Window_Banner-Three')
    Write-Host (Select-RandomBanner -BannerFunctions $Banners)

    Write-Host ''
    Write-Host 'Hyper-V Toolbox'
    Write-Host '--------------------'
    Write-Host ''

    Ask-Name -Prefix 'VM-Win'
    Ask-VirtualSwitch
    Write-Host ''
}

# Definition of parameters and variables for the creation of the virtual machine.

function Ask-Blank_VM-Windows {
    Clear-Host
    $Banners = @('Show_Windows_Logo', 'Show-Window_Banner-Two', 'Show-Window_Banner-Three')
    Write-Host (Select-RandomBanner -BannerFunctions $Banners)

    Write-Host ''
    Write-Host 'Hyper-V Toolbox'
    Write-Host '--------------------'
    Write-Host ''

    Ask-Name -Prefix 'VM-Win'
    Ask-VirtualSwitch
    Write-Host ''
    $RAMSizes = @('1GB', '2GB', '4GB', '8GB')
    # Remember, we count from 0. So 0 is the first value in the list.
    $DefaultRAMSizeChoiceIndex = 0
    Ask-RAMSize -RAMOptions $RAMSizes -DefaultRAMSizeChoice $DefaultRAMSizeChoiceIndex
    Write-Host ''
    $HDDSizes = @('24GB', '32GB', '48GB', '64GB', '96GB', '128GB')
    $DefaultHDDSizeChoiceIndex = 1
    Ask-HDDSize -HDDOptions $HDDSizes -DefaultHDDSizeChoice $DefaultHDDSizeChoiceIndex
    Write-Host ''
}

# Basic verification of resources, especially the directories where the data of the created virtual machines will be stored.

function Ensure-BasicResource {
    [string]$script:VHDPath = '.\assets\resources\vhds'
    [string]$script:VMsPath = '.\assets\resources\vms'
    
    $ResourceDirectory = Split-Path -Path $VHDPath

    try {
        if (-not (Test-Path $ResourceDirectory)) {
        New-Item -ItemType Directory -Path $ResourceDirectory -ErrorAction Stop | Out-Null
        }

        if (-not (Test-Path $VHDPath)) {
        New-Item -ItemType Directory -Path $VHDPath -ErrorAction Stop | Out-Null
        }

        if (-not (Test-Path $VMsPath)) {
        New-Item -ItemType Directory -Path $VMsPath -ErrorAction Stop | Out-Null
        }
    }
    catch {
        Write-Error "Erreur lors de la création des répertoires : $_"
        ScriptExit -ExitCode 1
    }
}

function Ensure-Directory {
    param (
        [Parameter(Mandatory = $true)][string]$Path
    )

    if (-not (Test-Path $Path)) {
        New-Item -Path $Path -ItemType Directory -Force | Out-Null
    }
}

function Ensure-JSONDirectory {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true)][string]$JSONFilePathDestination,
        [Parameter(Mandatory = $true)][string]$JSONFileDownloadSource
    )

    if (-not (Test-Path $JSONFilePathDestination)) {
        # Is a confirmation request really useful? Maybe, to be discussed.
        Write-Host ''
        Write-Warning 'JSON configuration file not found. Attempting to download.'
        try {
            # Information to check: Start-BitsTransfer seems to be more efficient for downloading heavy files. For smaller files, as it is the case here, Invoke-WebRequest is preferred.
            # Start-BitsTransfer -Source "$JSONFileDownloadSource" -Destination "$JSONFilePathDestination" -DisplayName 'Hyper-V Toolbox' -Description "Downloading from $JSONFileDownloadSource to $JSONFilePathDestination" -TransferType Download -Priority High -TransferPolicy Unrestricted -ErrorAction Stop
            
            # Some parameters are in testing phase. In particular a premium version system with a potential proxy required / authentication via username/password or API key... Still a lot of parameters to define.

            <#
            $uri = '$JSONFileDownloadSource'
            $outFile = '$JSONFilePathDestination'
            $headers = @{
            "User-Agent" = "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:88.0) Gecko/20100101 Firefox/88.0"
            }
            $proxy = "http://proxy.example.com:8080"
            $username = "user1"
            $password = "password1"
            Invoke-WebRequest -Uri $uri -OutFile $outFile -Headers $headers -Proxy $proxy -ProxyUseDefaultCredentials -Credential (Get-Credential -UserName $username -Message "Enter password for proxy authentication") -TimeoutSec 30 -UseBasicParsing
            #>

            # Use of simple parameters for the moment.

            Invoke-WebRequest -Uri $JSONFileDownloadSource -OutFile $JSONFilePathDestination -TimeoutSec 5 -UseBasicParsing
            Write-Warning 'Successfully downloaded.'
            Write-Host ''
            Read-Host 'Press enter to continue...'
        } catch {
            Write-Warning 'Download was not successful.'
            ScriptExit -ExitCode 1
            return $null
        }
    }

# Is it really necessary? I don't remember the reason for this particular implementation. To be defined, and tested.

<#
    try {
        return (Get-Content -Path $JSONFilePathDestination -Raw | ConvertFrom-Json -ErrorAction Stop)
    } catch {
        Write-Warning "Cannot read the JSON file from $JSONFilePathDestination."
        return $null
    }
#>
}

# TO-DO: Make answers, including errors, more verbose.

function Get-GDriveGFileID {
    param (
        [Parameter(Mandatory = $true)][string]$OGDriveFileSource
    )

    if ($OGDriveFileSource.Contains('download&id')) {
        return $null
    } elseif ($OGDriveFileSource -match "drive\.google\.com") {
    $GFileID = ($OGDriveFileSource -split '/')[5]
    $GDriveUrl = "https://drive.google.com/uc?export=download&id=$GFileID"
    return $GDriveUrl
    } else {
        return $null
    }
}

function Read-FromJSON {
    param (
        [Parameter(Mandatory = $true)][string]$JSONFilePathDestination
    )

    if (Test-Path $JSONFilePathDestination) {
        $JSONContent = Get-Content -Path $JSONFilePathDestination -Raw
        $JSONdata = $JSONContent | ConvertFrom-Json
        return $JSONdata
    } elseif (-not (Test-Path $JSONFilePathDestination)) {
        Write-Warning 'JSON configuration file not found.'
        Write-Host ''
        ScriptExit -ExitCode 1
    } else {
        Write-Warning 'Unknown error.'
        ScriptExit -ExitCode 1
    }
}

# Functions to debug. Download function with Start-BitsTransfer seems to generate errors.

<#
function Invoke-GDriveFileRequest {
    param(
        [Parameter(Mandatory=$true)]
        [string]$Url,
        [Parameter(Mandatory=$true)]
        [string]$Destination,
        [string]$DisplayName = "Hyper-V Toolbox",
        [string]$Description = "Downloading from $url to $Destination"
    )

    $WebClient = New-Object System.Net.WebClient
    $DownloadPageContent = $WebClient.DownloadString($Url)
    $DownloadLink = $DownloadPageContent | Select-String -Pattern 'action="([^"]+)"' | ForEach-Object { $_.Matches.Groups[1].Value }
    # missing "&amp;at=ANzk5s4hvM91yEKvCBmMV_PvVvI_:1682070713695" at the end. That's why it doesn't work. Problem to solve.

    Add-Type -AssemblyName System.Web
    $DownloadLink = [System.Web.HttpUtility]::HtmlDecode($DownloadLink)

    Start-BitsTransfer -Source $DownloadLink -Destination $Destination -DisplayName $DisplayName -Description $Description -TransferType Download -Priority High -TransferPolicy Unrestricted
    [string]$script:DownloadLink
    [string]$script:Url = $DownloadLink
}

function Download_File {
    param(
        [Parameter(Mandatory=$true)]
        [string]$Url,
        [Parameter(Mandatory=$true)]
        [string]$Destination,
        [string]$DisplayName = "Hyper-V Toolbox",
        [string]$Description = "Downloading from $url to $Destination"
    )

    Start-BitsTransfer -Source $DownloadLink -Destination $Destination -DisplayName $DisplayName -Description $Description -TransferType Download -Priority High -TransferPolicy Unrestricted
}
#>

<#
======================
 Check Windows Blank VM Links
======================
#>

function Check-Blank_VMLinks-Windows {
$BlankWindowsJSONFile = '.\assets\links\blank_windows.json'
$JSONDirectory = Split-Path -Path $BlankWindowsJSONFile
Ensure-Directory -Path $JSONDirectory

$Url = $BlankWindowsJsonLinksFile

# Downloading from Google Drive is not well managed.
    if ($Url -match "drive\.google\.com") {
        $Url = Get-GDriveGFileID -OGDriveFileSource '$Url'
    }

    # void is a data type that is used to represent the absence of a return value from a function or method. In this case, I don't want return values. I just want to make sure that the necessary resources are available.
    [void](Ensure-JSONDirectory -JSONFilePathDestination $BlankWindowsJSONFile -JSONFileDownloadSource $Url)

$script:MenuItems = Read-FromJSON -JSONFilePathDestination "$BlankWindowsJSONFile"
}

# Initialization of the display of the menu of choice of the virtual (Blank) machines (Show-Blank_VM-Windows). Upstream verification.

function Show-Blank_VM-Windows {
    Check-Blank_VMLinks-Windows
    Show-Downloadable_VM
}

# Menu of the choice of the virtual machine. Recovery from the JSON file.

function Show-Downloadable_VM {
    Clear-Host
    Write-Host (Select-RandomBanner -BannerFunctions "Show-Space_Banner", "Show-Space_Banner-Two", "Show-Space_Banner-Three")
    Write-Host ''
    Write-Host 'Hyper-V Toolbox'
    Write-Host '--------------------'

    for ($i = 0; $i -lt $MenuItems.Count; $i++) {
        Write-Host " $($i + 1). $($MenuItems[$i].Title)"
    }
    Write-Host ''
    $choice = Read-Host "Enter your choice [1-$($MenuItems.Count)] or 'C' to cancel"
    if ($choice -ne 'c') {
        $index = [int]$choice - 1

        if ($index -ge 0 -and $index -lt $MenuItems.Count) {
            $Url = $MenuItems[$index].Url

            $script:Title = $MenuItems[$index].Title
            $script:Filename = $MenuItems[$index].Filename
            $script:OutputDirectory = '.\assets\images'
            $script:OutputPath = Join-Path -Path $OutputDirectory -ChildPath $Filename

            if (-not (Test-Path $OutputDirectory)) {
                [void](New-Item -Path $OutputDirectory -ItemType Directory -Force)
            }

            if (-not (Test-Path $OutputPath)) {
                if ($Url -match "drive\.google\.com") {
                    $Url = Get-GDriveGFileID -OGDriveFileSource $Url
                    # TO-DEBUG: As said before, Invoke-GDriveFileRequest is to be debugged.
                    # Invoke-GDriveFileRequest -Url "$url" -DisplayName "Hyper-V Toolbox" -Destination "$OutputPath" -Description "Downloading of $title from $Url to $outputPath"; Clear-Host
                    # Start-BitsTransfer -Source "$Url" -Destination "$OutputPath" -DisplayName "Hyper-V Toolbox" -Description "Downloading of $Title from $Url to $OutputPath" -TransferType Download -Priority High -TransferPolicy Unrestricted; Clear-Host
                } else {
                $maxRetries = 2
                $retryInterval = 5 # seconds
                $retryCount = 0
                do {
                    try {
                    Write-Host ''
                    Write-Warning "$Title in $OutputPath not found. Attempting to download."
                    Start-BitsTransfer -Source $Url -Destination $OutputPath -DisplayName 'Hyper-V Toolbox' -Description "Downloading of $Title from $Url to $OutputPath" -TransferType Download -TransferPolicy Unrestricted
                    # Is a confirmation request really useful? Maybe, especially if the person is absent, to be discussed.
                    Write-Warning 'Successfully downloaded.'
                    Write-Host ''
                    Read-Host 'Press enter to continue...'
                    break
                    } catch {
                    $retryCount++
                        if ($retryCount -lt $maxRetries) {
                        Write-Host ''
                        Write-Warning "An error occurred while downloading $Title. Retrying in $retryInterval seconds..."
                        Start-Sleep -Seconds $retryInterval
                        } else {
                        Write-Host ''
                        Write-Error "An error occurred while downloading $Title after $maxRetries attempts."
                        ScriptExit -ExitCode 1
                        }
                    }
                } while ($retryCount -lt $maxRetries)
                }

            } else {
            $null
            # Existing image file. No download required.
            }
        
        } else {
        Show-Invalid_Input
        Show-Downloadable_VM
        }
    
    } elseif ($choice -eq 'c') { break } else { continue }
}

# Additional but necessary tasks.

function New-BlankVM-Windows-AdditionalTasks {
# To be debated but automatic checkpoints seem to me more harmful than anything else. You are smart enough to have your own checkpoint management.
Set-VM -Name $VMName -AutomaticCheckpointsEnabled $false

# Add the ISO on the VM.

Add-VMDvdDrive -VMName $VMName -Path $OutputPath

# More difficult than it looks. Sorts the elements of the boot order according to their type of boot device and stores them in separate variables according to their type (HDD, Network, DVD).

$VM = Get-VMFirmware $VMName
$BootOrder = $VM.BootOrder

for ($i = 0; $i -lt $BootOrder.Count; $i++) {
    if ($BootOrder[$i].Device.Name -match "Network Adapter") {
        $Network += $BootOrder[$i]
    }
    elseif ($BootOrder[$i].Device.Name -match "Hard Drive") {
        $HDD += $BootOrder[$i]
    }
    elseif ($BootOrder[$i].Device.Name -match "DVD Drive") {
        $DVD += $BootOrder[$i]
    }
}

# I have the possibility to use FirstBootDevice, but specifying the package seems to me more interesting and suitable.

# Set-VMFirmware -VMName $VMName -FirstBootDevice $DVD
Set-VMFirmware -VMName $VMName -BootOrder $DVD, $HDD, $Network

# Useless for Windows. But I keep in comment, useful in some cases especially Linux machines.

# Set-VMFirmware $VMName -EnableSecureBoot Off
# Set-VMMemory $VMName -DynamicMemoryEnabled $False
}

# Function including all the parameters previously defined for the creation of the virtual machine.

function New-BlankVM-Windows {
# Reminder of useful global variable names.
# HDDSize, RAMSize, UseVSwitch (bool), VSwitchName, VMName 
# Title, Filename, OutputDirectory, OutputPath, Url

# New-VM does not understand the size format of type X GB. It is worth converting to bytes. For this reason: Remove the 'GO' from my variable, then multiply the value by the constant '1GB' to convert gigabytes to bytes.

$RAMSize = [System.Convert]::ToInt64($RAMSize.Replace("GB", "")) * 1GB
$HDDSize = [System.Convert]::ToInt64($HDDSize.Replace("GB", "")) * 1GB

    $ProgressPreference = 'SilentlyContinue'
    
    if ($UseVSwitch -eq $false) {
        [void](New-VM -Name $VMName -MemoryStartupBytes $RAMSize -Generation 2 -NewVHDPath "$VHDPath\$VMName.vhdx" -NewVHDSizeBytes $HDDSize -Path $VMsPath)
    } elseif ($UseVSwitch -eq $true) {
        [void](New-VM -Name $VMName -MemoryStartupBytes $RAMSize -Generation 2 -NewVHDPath "$VHDPath\$VMName.vhdx" -NewVHDSizeBytes $HDDSize -Path $VMsPath -SwitchName $VSwitchName)
        }
    else {
        Write-Warning 'Error during the creation of the virtual machine.'
        ScriptExit -ExitCode 1
    }
}

# Selection menu, after the creation of the virtual machine (clone, return to the main menu, quit...).
# TODO: Find a better function name.

function SelectionMenuAfterBlankVMCreation {
    while ($true) {
        Write-Host (Show-SelectionMenuAfterBlankVMCreation)

            $choice = Read-Host 'Enter your choice'
            switch ($choice) {
            '1' { Blank_VM }

            '2' { Blank_VM-Windows-Clone }
            '3' { Blank_VM-Windows-Similar }

            'r' { if ((Get-VM -Name $VMName).State -eq 'Off') { Start-VM -Name $VMName } else { Write-Host ''; Read-Host "VM $VMName is already running..."; } Clear-Host; Show-CreatedVMStatus }
            's' { if ((Get-VM -Name $VMName).State -eq 'Running') { Stop-VM -Name $VMName -Force } else { Write-Host ''; Read-Host "VM $VMName is already stopped..."; } Clear-Host; Show-CreatedVMStatus }
            'b' { main }
            'q' { Write-Host ''; ScriptExit -ExitCode 0 }
            default { Show-Invalid_Input; Clear-Host }
        }
    }
}

# Graphical representation of the menu after the creation of the blank VM.

function Show-SelectionMenuAfterBlankVMCreation {
@"
  1 - Create a new blank virtual machine.

  2 - Clone (create) a new blank virtual machine with strictly the same configuration.
  3 - Create a new blank virtual machine similar but with a different configuration.

r - Run the machine in the background.
s - Turn the machine off.

b - Back to main menu.
q - Quit the program.

"@
}

# Display the status of the created VM.

function Show-CreatedVMStatus {
    Write-Host (Show-HPV_TBX_Banner)
    Write-Host '----------------------------------------'
    if ( (Get-VM -Name $VMName).Name ) {
        Write-Host ''
        Write-Host "Virtual machine $VMName created successfully."

        # I don't need so many elements for the moment but I'll keep them aside.
        # Get-VM -Name $VMName | Format-Table Name, State, CPUUsage, MemoryAssigned, Uptime, Status, Version -AutoSize -Wrap
        # Get-VM -Name $VMName | Format-Table Name, State, Status -AutoSize -Wrap
        Write-Host ''
        Get-VM -Name $VMName | Format-Table Name, State, @{Name='RAM'; Expression={$RAMSize}}, @{Name='Storage'; Expression={$HDDSize}} -AutoSize -Wrap

        if ( (Get-VM).Count -gt 2 ) {
        Write-Host 'List of all virtual machines: '
        Write-Host ''
        Get-VM | Format-Table Name, State -AutoSize -Wrap
        }
        else {
            $null
        }

        SelectionMenuAfterBlankVMCreation

    } else {
        Write-Host "Error when checking the status of the virtual machine $VMName."
    }
}

# Main function for creating a Windows blank virtual machine. Starts by checking dependencies, displaying the list of available base resources, gathering all this information to a function to create the VM from this last information, then displays the status and continuation options.

function Blank_VM-Windows-Clone {
    Ensure-BasicResource
    Ask-Clone-Blank_VM-Windows
    New-BlankVM-Windows
    Show-Animated_Pacman
    New-BlankVM-Windows-AdditionalTasks
    Show-CreatedVMStatus
}

function Blank_VM-Windows-Similar {
    Ask-Blank_VM-Windows
    # Creation of the VM from the previously recovered parameters.
    New-BlankVM-Windows
    # Animation after creation of the VM.
    Show-Animated_Pacman
    # Performing additional tasks specific to the system of the VM in question.
    New-BlankVM-Windows-AdditionalTasks
    # Status of the VM.
    Show-CreatedVMStatus
}

function Blank_VM-Windows {
    # Show-Blank_VM-Windows calls Check-Blank_VMLinks-Windows, which defines and checks the state of the resources that allow access to the list of blank virtual machines (checking directories, files, download potential...). Then, once the essential has been checked, it displays the list of available machines, from the json file previously checked and potentially downloaded if none exists.
    Show-Blank_VM-Windows
    # Verification of the tree structure containing the basic directories, especially for storing the contents of hard disks and virtual machines.
    Ensure-BasicResource
    # Recovery of the variables corresponding to the parameters, allowing to create the virtual machine (name of the machine, RAM, size of the hard disk, etc).
    Ask-Blank_VM-Windows
    # Creation of the VM from the previously recovered parameters.
    New-BlankVM-Windows
    # Animation after creation of the VM.
    Show-Animated_Pacman
    # Performing additional tasks specific to the system of the VM in question.
    New-BlankVM-Windows-AdditionalTasks
    # Status of the VM.
    Show-CreatedVMStatus
}

# Main menu for the creation of a blank virtual machine.

function Blank_VM {
    while ($true) {
        Clear-Host
        Write-Host (Show-OSMenu)

            $choice = Read-Host "Enter your choice"
            switch ($choice) {
            '1' { Blank_VM-Windows }
            '2' { Blank_VM-Linux }
            'b' { main }
            'q' { Write-Host ''; ScriptExit -ExitCode 0 }
            default { Show-Invalid_Input }
        }
    }
}

# Visual representation of the operating system type selection menu.

function Show-OSMenu {
$Banners = @('Show-Window_Banner', 'Show-Window_Banner-Two', 'Show-Window_Banner-Three', 'Show-Window_Banner-Four')
Write-Host (Select-RandomBanner -BannerFunctions $Banners)
@"

Hyper-V Toolbox - OS selection
--------------------
  1 - Windows
  2 - Linux

b - Back
q - Quit the program.

"@
}

# Interactive confirmation function.

function AskYesOrNo {
    param (
        [string]$Title,
        [string]$Message,
        [bool]$DefaultNo = $false
    )

    if ($host.UI.SupportsVirtualTerminal) {
        $choiceYes = New-Object System.Management.Automation.Host.ChoiceDescription "&Yes", "Yes"
        $choiceNo = New-Object System.Management.Automation.Host.ChoiceDescription "&No", "No"
        $options = [System.Management.Automation.Host.ChoiceDescription[]]($choiceYes, $choiceNo)
        $defaultChoice = if ($DefaultNo) { 1 } else { 0 }
        $result = $host.UI.PromptForChoice($Title, $Message, $options, $defaultChoice)

        return ($result -eq 0)
    } else {
        while ($true) {
            $response = Read-Host -Prompt "$Message [y/n]"
            switch ($response.ToLower()) {
                "y" { return $true }
                "yes" { return $true }
                "n" { return $false }
                "no" { return $false }
                default { Write-Host "Please enter 'y' or 'n'." }
            }
        }
    }
}

# Help Menu. More graphic than informative.

function Show-Help {
Clear-Host
    @"
                                             _______________________
   _______________________-------------------                       '\
 /:--__                                                              |
||< > |                                   ___________________________/
| \__/_________________-------------------                         |
|                                                                  |
 |                       HYPER-V_TOOLBOX                            |
 |                                                                  |
 |      "Inspired by Vagrant and Docker,                            |
  |        This project is aimed at providing users                  |
  |      with a more efficient and user-friendly tool                |
  |        for virtual machine management."                          |
   |                                                                 |
  |                                              ____________________|_
  |  ___________________-------------------------                      '\
  |/'--_                                                                 |
  ||[ ]||                                            ___________________/
   \===/___________________--------------------------

"@
}

# Logical (functional) part of the main menu.

function main {
    while ($true) {
        Clear-Host
        Write-Host (Show_Menu)

        $choice = Read-Host 'Enter your choice'
        switch ($choice) {
            '1' { Blank_VM }
            '2' { Write-Host ''; Write-Warning 'Feature under development'; pause; main }
            '3' { Write-Host ''; Write-Warning 'Feature under development'; pause; main }
            '4' { Write-Host ''; Write-Warning 'Feature under development'; pause; main }
            '5' { Write-Host ''; Write-Warning 'Feature under development'; pause; main }
            '6' { Write-Host ''; Write-Warning 'Feature under development'; pause; main }
            'h' { Write-Host (Show-Help); Write-Host ''; Read-Host 'Press enter to continue...' }
            'q' { Write-Host ''; ScriptExit -ExitCode 0 }
            default { Show-Invalid_Input }
        }
    }
}

# Graphical representation of the main menu.

function Show_Menu {
Write-Host (Show-Buddha_Banner)
@"

Hyper-V Toolbox - Main menu
-------------------
  1 - Create a virtual machine
  2 - Create a preconfigured virtual machine from a template [Under development]

  3 - Creation of laboratories [Under development]

  4 - Management of virtual machines [Under development]
  5 - Management of virtual switches [Under development]

  6 - Management of local resources [Under development]
  
h - Show help
q - Quit the program.

"@
}

# Handling of invalid entries.

function Show-Invalid_Input {
    Write-Host ''
    Write-Warning 'Invalid entry detected.'
    Read-Host 'Press enter to continue...'
}

# Logging function. Useful for debugging. Takes into account many parameters, including logging to Windows Event Viewer, logging to a file (LogFile), log category (Level)...

function Write-Log {
    param (
        [Parameter(Mandatory = $true)][string]$Message,
        [Parameter(Mandatory = $false)][ValidateSet('INFO', 'WARNING', 'ERROR')][string]$Level = 'INFO',
        [Parameter(Mandatory = $false)][string]$LogFile = 'hyper-v-toolbox.log',
        [Parameter(Mandatory = $false)][bool]$UseEventLog = $false,
        [Parameter(Mandatory = $false)][string]$EventLogSource = 'Hyper-V_Toolbox'
    )

    if ($Verbose) {
        $timestamp = Get-Date -Format 'yyyy-MM-dd HH:mm:ss'
        $logMessage = "[$timestamp] [$Level] $Message"

        try {
            Add-Content -Path $LogFile -Value $logMessage -ErrorAction Stop
        } catch {
            Write-Error "Failed to write log message: $_"
        }

        if ($UseEventLog) {
            $entryType = @{
                'INFO' = 'Information'
                'WARNING' = 'Warning'
                'ERROR' = 'Error'
            }[$Level]

            if (-not (Get-EventLog -LogName Application -Source $EventLogSource -ErrorAction SilentlyContinue)) {
                New-EventLog -LogName Application -Source $EventLogSource
            }

            Write-EventLog -LogName Application -Source $EventLogSource -EntryType $entryType -EventId 1000 -Message $Message
        }
    }
}

# Exit function.

function ScriptExit {
    [CmdletBinding()]
    param(
        [Parameter()]
        [int]$ExitCode = 0
    )

    Write-Warning "Exiting script with exit code $ExitCode"
    exit $ExitCode
}

# Administrator rights verification function.

function Get-AdminRights {
    [CmdletBinding()]
    [OutputType([bool])]
    param()

    $identity = [System.Security.Principal.WindowsIdentity]::GetCurrent()
    $principal = New-Object System.Security.Principal.WindowsPrincipal($identity)
    $adminRole = [System.Security.Principal.WindowsBuiltInRole]::Administrator
    return $principal.IsInRole($adminRole)
}

# Entry point.

# Enable or disable the logging function.
$Verbose = $false

# Verification of the administration rights as well as the state of the Hyper-V module, on which the script depends.

if (Get-AdminRights) {
    Write-Log -Message 'The script launch operation has been successfully executed.' -Level 'INFO' -UseEventLog $true

    if (Get-WindowsOptionalFeature -FeatureName Microsoft-Hyper-V-All -Online | Where-Object {$_.State -eq 'Enabled'}) {
        Import-Module Hyper-V
    } else {
        Write-Warning 'The Hyper-V module is required to operate.'
    }
    
    main
} else {
    Write-Warning 'You must have administrator rights to run this program.'
}
